/**
 * This class is generated by jOOQ
 */
package webdoctor.jooq.tables;


import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;

import webdoctor.jooq.Webdoctor;
import webdoctor.jooq.tables.records.ArticleRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Article extends TableImpl<ArticleRecord> {

    private static final long serialVersionUID = 1305434835;

    /**
     * The reference instance of <code>webdoctor.article</code>
     */
    public static final Article ARTICLE = new Article();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArticleRecord> getRecordType() {
        return ArticleRecord.class;
    }

    /**
     * The column <code>webdoctor.article.id</code>.
     */
    public final TableField<ArticleRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "");

    /**
<<<<<<< HEAD
=======
     * The column <code>webdoctor.article.author_id</code>.
     */
    public final TableField<ArticleRecord, Integer> AUTHOR_ID = createField("author_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
>>>>>>> yibin
     * The column <code>webdoctor.article.title</code>.
     */
    public final TableField<ArticleRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR.length(1000), this, "");

    /**
     * The column <code>webdoctor.article.time_stamp</code>.
     */
    public final TableField<ArticleRecord, Timestamp> TIME_STAMP = createField("time_stamp", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>webdoctor.article.content</code>.
     */
    public final TableField<ArticleRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>webdoctor.article</code> table reference
     */
    public Article() {
        this("article", null);
    }

    /**
     * Create an aliased <code>webdoctor.article</code> table reference
     */
    public Article(String alias) {
        this(alias, ARTICLE);
    }

    private Article(String alias, Table<ArticleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Article(String alias, Table<ArticleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Webdoctor.WEBDOCTOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Article as(String alias) {
        return new Article(alias, this);
    }

    /**
     * Rename this table
     */
    public Article rename(String name) {
        return new Article(name, null);
    }
}
